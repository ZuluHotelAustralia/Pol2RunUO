//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;



public partial class NpcClass : NpcClassBase {
    
        
        private string _classNameField;

        public string className {
            get {
                return this._classNameField;
            }
        }

        private System.Collections.Generic.SortedDictionary<string,string> _fieldsField;

        public System.Collections.Generic.SortedDictionary<string,string> fields {
            get {
                return this._fieldsField;
            }
        }

        private System.Collections.Generic.Dictionary<string, List<string>> _equipField;

        public System.Collections.Generic.Dictionary<string, List<string>> equip {
            get {
                return this._equipField;
            }
        }

        private System.Collections.Generic.List<string> _overridesField;

        public System.Collections.Generic.List<string> overrides {
            get {
                return this._overridesField;
            }
        }

    
    public virtual string TransformText() {
        this.GenerationEnvironment = null;
        
        #line 8 "NpcClass.tt"
        this.Write("\n\nusing System;\nusing System.Collections.Generic;\nusing Server;\nusing Server.Ethi" +
                "cs;\nusing Server.Misc;\nusing Server.Items;\nusing static Server.Mobiles.CreatureP" +
                "rop;\n\nnamespace Server.Mobiles\n{\n    public class ");
        
        #line default
        #line hidden
        
        #line 20 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( className ));
        
        #line default
        #line hidden
        
        #line 20 "NpcClass.tt"
        this.Write(" : BaseCreature\n    {\n        static ");
        
        #line default
        #line hidden
        
        #line 22 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( className ));
        
        #line default
        #line hidden
        
        #line 22 "NpcClass.tt"
        this.Write("() => CreatureProperties.Register<");
        
        #line default
        #line hidden
        
        #line 22 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( className ));
        
        #line default
        #line hidden
        
        #line 22 "NpcClass.tt"
        this.Write(">(new CreatureProperties\n        {\n");
        
        #line default
        #line hidden
        
        #line 24 "NpcClass.tt"
 foreach ((string key, string value) in fields) {
        
        #line default
        #line hidden
        
        #line 25 "NpcClass.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 25 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( key ));
        
        #line default
        #line hidden
        
        #line 25 "NpcClass.tt"
        this.Write(" = ");
        
        #line default
        #line hidden
        
        #line 25 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( value ));
        
        #line default
        #line hidden
        
        #line 25 "NpcClass.tt"
        this.Write(",\n");
        
        #line default
        #line hidden
        
        #line 26 "NpcClass.tt"
 } 
        
        #line default
        #line hidden
        
        #line 27 "NpcClass.tt"
        this.Write("  \n        });\n\n        [Constructable]\n        public ");
        
        #line default
        #line hidden
        
        #line 31 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( className ));
        
        #line default
        #line hidden
        
        #line 31 "NpcClass.tt"
        this.Write("() : base(CreatureProperties.Get<");
        
        #line default
        #line hidden
        
        #line 31 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( className ));
        
        #line default
        #line hidden
        
        #line 31 "NpcClass.tt"
        this.Write(">())\n        {\n            // Add customization here\n\n");
        
        #line default
        #line hidden
        
        #line 35 "NpcClass.tt"
 foreach ((string name, List<string> statements) in equip) {
        
        #line default
        #line hidden
        
        #line 36 "NpcClass.tt"
 foreach (string stmt in statements) {
        
        #line default
        #line hidden
        
        #line 37 "NpcClass.tt"
        this.Write("            ");
        
        #line default
        #line hidden
        
        #line 37 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( stmt ));
        
        #line default
        #line hidden
        
        #line 37 "NpcClass.tt"
        this.Write("\n");
        
        #line default
        #line hidden
        
        #line 38 "NpcClass.tt"
 } 
        
        #line default
        #line hidden
        
        #line 39 "NpcClass.tt"
        this.Write("  \n");
        
        #line default
        #line hidden
        
        #line 40 "NpcClass.tt"
 } 
        
        #line default
        #line hidden
        
        #line 41 "NpcClass.tt"
        this.Write("  \n        }\n\n        public ");
        
        #line default
        #line hidden
        
        #line 44 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( className ));
        
        #line default
        #line hidden
        
        #line 44 "NpcClass.tt"
        this.Write("(Serial serial) : base(serial) {}\n\n");
        
        #line default
        #line hidden
        
        #line 46 "NpcClass.tt"
 foreach (string over in overrides) {
        
        #line default
        #line hidden
        
        #line 47 "NpcClass.tt"
        this.Write("        ");
        
        #line default
        #line hidden
        
        #line 47 "NpcClass.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( over ));
        
        #line default
        #line hidden
        
        #line 47 "NpcClass.tt"
        this.Write("\n");
        
        #line default
        #line hidden
        
        #line 48 "NpcClass.tt"
 } 
        
        #line default
        #line hidden
        
        #line 49 "NpcClass.tt"
        this.Write(@"  

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int) 0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}");
        
        #line default
        #line hidden
        return this.GenerationEnvironment.ToString();
    }
    
    public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("className"))) {
                    object data = this.Session["className"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._classNameField = ((string)(data));
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'className\' did not match the type pass" +
                                "ed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("fields"))) {
                    object data = this.Session["fields"];
                    if (typeof(System.Collections.Generic.SortedDictionary<string,string>).IsAssignableFrom(data.GetType())) {
                        this._fieldsField = ((System.Collections.Generic.SortedDictionary<string,string>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.SortedDictionary<string,string>\' of the para" +
                                "meter \'fields\' did not match the type passed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("equip"))) {
                    object data = this.Session["equip"];
                    if (typeof(System.Collections.Generic.Dictionary<string, List<string>>).IsAssignableFrom(data.GetType())) {
                        this._equipField = ((System.Collections.Generic.Dictionary<string, List<string>>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.Dictionary<string, List<string>>\' of the par" +
                                "ameter \'equip\' did not match the type passed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("overrides"))) {
                    object data = this.Session["overrides"];
                    if (typeof(System.Collections.Generic.List<string>).IsAssignableFrom(data.GetType())) {
                        this._overridesField = ((System.Collections.Generic.List<string>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<string>\' of the parameter \'overrides\' d" +
                                "id not match the type passed to the template");
                    }
                }
            }

    }
}

public class NpcClassBase {
    
    private global::System.Text.StringBuilder builder;
    
    private global::System.Collections.Generic.IDictionary<string, object> session;
    
    private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
    
    private string currentIndent = string.Empty;
    
    private global::System.Collections.Generic.Stack<int> indents;
    
    private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
    
    public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
        get {
            return this.session;
        }
        set {
            this.session = value;
        }
    }
    
    public global::System.Text.StringBuilder GenerationEnvironment {
        get {
            if ((this.builder == null)) {
                this.builder = new global::System.Text.StringBuilder();
            }
            return this.builder;
        }
        set {
            this.builder = value;
        }
    }
    
    protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
        get {
            if ((this.errors == null)) {
                this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
            }
            return this.errors;
        }
    }
    
    public string CurrentIndent {
        get {
            return this.currentIndent;
        }
    }
    
    private global::System.Collections.Generic.Stack<int> Indents {
        get {
            if ((this.indents == null)) {
                this.indents = new global::System.Collections.Generic.Stack<int>();
            }
            return this.indents;
        }
    }
    
    public ToStringInstanceHelper ToStringHelper {
        get {
            return this._toStringHelper;
        }
    }
    
    public void Error(string message) {
        this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
    }
    
    public void Warning(string message) {
        global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
        val.IsWarning = true;
        this.Errors.Add(val);
    }
    
    public string PopIndent() {
        if ((this.Indents.Count == 0)) {
            return string.Empty;
        }
        int lastPos = (this.currentIndent.Length - this.Indents.Pop());
        string last = this.currentIndent.Substring(lastPos);
        this.currentIndent = this.currentIndent.Substring(0, lastPos);
        return last;
    }
    
    public void PushIndent(string indent) {
        this.Indents.Push(indent.Length);
        this.currentIndent = (this.currentIndent + indent);
    }
    
    public void ClearIndent() {
        this.currentIndent = string.Empty;
        this.Indents.Clear();
    }
    
    public void Write(string textToAppend) {
        this.GenerationEnvironment.Append(textToAppend);
    }
    
    public void Write(string format, params object[] args) {
        this.GenerationEnvironment.AppendFormat(format, args);
    }
    
    public void WriteLine(string textToAppend) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendLine(textToAppend);
    }
    
    public void WriteLine(string format, params object[] args) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendFormat(format, args);
        this.GenerationEnvironment.AppendLine();
    }
    
    public class ToStringInstanceHelper {
        
        private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
        
        public global::System.IFormatProvider FormatProvider {
            get {
                return this.formatProvider;
            }
            set {
                if ((value != null)) {
                    this.formatProvider = value;
                }
            }
        }
        
        public string ToStringWithCulture(object objectToConvert) {
            if ((objectToConvert == null)) {
                throw new global::System.ArgumentNullException("objectToConvert");
            }
            global::System.Type type = objectToConvert.GetType();
            global::System.Type iConvertibleType = typeof(global::System.IConvertible);
            if (iConvertibleType.IsAssignableFrom(type)) {
                return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
            }
            global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                        iConvertibleType});
            if ((methInfo != null)) {
                return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                            this.formatProvider})));
            }
            return objectToConvert.ToString();
        }
    }
}
